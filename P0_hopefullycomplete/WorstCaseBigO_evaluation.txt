BigO Analysis of Project0: Unscrambling Computer Science Problems

Task0.py:
3 lines of code that don't change no matter what n is:
Worst case BigO is O(3)


Task1.py:
For loop for iterating over the length of texts and for loop iterating over the length of calls, 
with two lines of code called for each run through each for loop (2n)/loop. The for loops will add the most time to the script, 
so they are the only calls that need to be included in the worst case BigO determination:
Assuming that the length of texts + length of calls = n, then the average number of inputs for each for loop will be around n/2 ~
so 2n for each for loop becomes n, and worst case BigO becomes O(2n). 


Task2.py:
For loop containing 12 lines of code -- at the worst case, if each number has to go through all of the conditional statements,
then 6 lines of code will be executed ~ O(6n). 

Task3.py:
The for loop has the following approximate lines of code: 1+3+2+1+17(for loop included in the else statement of getPrefix -- adds ~12)+5 --> ~30n 
The.sort() function adds approximately 2n (assuming the !sort worst case criteria from the sourcepage listed).
On top of that, the print function is also a for loop, so there is another n added there. 
So worst case 30n + 2n + n --> ~O(33n)


Task4.py:
As in Task2, there are two for loops with two lines of code apiece, one loop for calls and another for texts, so worst case that will 
add ~ 2n (assuming n = len(texts) + len(calls)). Worst case, the number of telemarketers is the same as both lists, so the accompanying 
for loop will add 3n, the .sort() function adds 2n and the final print for loop will add another n. In total this is ~O(8n). 
